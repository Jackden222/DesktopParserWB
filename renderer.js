const { ipcRenderer, shell } = require('electron');
const fs = require('fs');
const path = require('path');
const XLSX = require('xlsx');

const searchInput = document.getElementById('search-input');
const searchBtn = document.getElementById('search-btn');
const fileList = document.getElementById('file-list');
const previewTitle = document.getElementById('preview-title');
const previewTable = document.getElementById('preview-table');
const loadingOverlay = document.getElementById('loading-overlay');

let previewData = [];
let previewHeaders = [];
let sortState = { col: null, dir: 1 };

function getXlsxFiles() {
  const files = fs.readdirSync('.').filter(f => f.endsWith('.xlsx'));
  return files
    .map(f => ({
      name: f,
      mtime: fs.statSync(f).mtime.getTime()
    }))
    .sort((a, b) => b.mtime - a.mtime)
    .map(f => f.name);
}

function updateFileList() {
  fileList.innerHTML = '';
  const files = getXlsxFiles();
  files.forEach(f => {
    const li = document.createElement('li');
    li.textContent = f;
    li.onclick = () => previewFile(f);
    fileList.appendChild(li);
  });
  if (files.length > 0) previewFile(files[0]);
}

function renderPreviewTable() {
  if (!previewData.length) return;
  let html = '<table>';
  // –ó–∞–≥–æ–ª–æ–≤–∫–∏
  html += '<tr>' + previewHeaders.map((cell, j) => {
    let sortArrow = '';
    if ([
      '–¶–µ–Ω–∞',
      '–†–µ–π—Ç–∏–Ω–≥',
      '–ö–æ–ª-–≤–æ –æ—Ç–∑—ã–≤–æ–≤',
      '–û–±—ä—ë–º –ø—Ä–æ–¥–∞–∂ –≤ –º–µ—Å'
    ].includes(cell)) {
      if (sortState.col === j) sortArrow = sortState.dir === 1 ? ' <span style="font-size:14px">‚ñ≤</span>' : ' <span style="font-size:14px">‚ñº</span>';
      return `<th class="sortable" data-col="${j}">${cell}${sortArrow}</th>`;
    }
    return `<th>${cell}</th>`;
  }).join('') + '</tr>';
  // –î–∞–Ω–Ω—ã–µ
  previewData.forEach((row, i) => {
    html += '<tr>' + row.map((cell, j) => {
      if (previewHeaders[j] === '–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä' || previewHeaders[j] === '–°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω') {
        if (cell && typeof cell === 'string' && cell.startsWith('http')) {
          return `<td><a href="#" onclick="window.openLink('${cell}')">–°—Å—ã–ª–∫–∞</a></td>`;
        }
      }
      return `<td title="${cell ?? ''}">${cell ?? ''}</td>`;
    }).join('') + '</tr>';
  });
  html += '</table>';
  previewTable.innerHTML = html;
  // –ù–∞–≤–µ—à–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  document.querySelectorAll('.sortable').forEach(th => {
    th.onclick = () => {
      const col = Number(th.getAttribute('data-col'));
      if (sortState.col === col) sortState.dir *= -1;
      else { sortState.col = col; sortState.dir = 1; }
      sortPreviewData(col, sortState.dir);
      renderPreviewTable();
    };
  });
  window.openLink = (url) => { shell.openExternal(url); };
}

function sortPreviewData(col, dir) {
  // –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø—É—Å—Ç—ã—Ö –∏ –Ω–µ—á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
  previewData = previewData
    .map((row, idx) => ({ row, idx }))
    .sort((a, b) => {
      let av = a.row[col], bv = b.row[col];
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫ —á–∏—Å–ª—É –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
      av = typeof av === 'string' && av.replace ? Number(av.replace(/[^\d.,-]/g, '').replace(',', '.')) : av;
      bv = typeof bv === 'string' && bv.replace ? Number(bv.replace(/[^\d.,-]/g, '').replace(',', '.')) : bv;
      // –ü—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Å–µ–≥–¥–∞ –≤–Ω–∏–∑—É
      if ((av === null || av === undefined || isNaN(av)) && (bv === null || bv === undefined || isNaN(bv))) return a.idx - b.idx;
      if (av === null || av === undefined || isNaN(av)) return 1;
      if (bv === null || bv === undefined || isNaN(bv)) return -1;
      if (av === bv) return a.idx - b.idx;
      return dir * (av - bv);
    })
    .map(obj => obj.row);
}

function previewFile(filename) {
  previewTitle.textContent = '–ü—Ä–æ—Å–º–æ—Ç—Ä ' + filename;
  try {
    const wb = XLSX.readFile(filename);
    const ws = wb.Sheets[wb.SheetNames[0]];
    const data = XLSX.utils.sheet_to_json(ws, { header: 1 });
    previewHeaders = data[0];
    previewData = data.slice(1);
    sortState = { col: null, dir: 1 };
    renderPreviewTable();
    // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ products –¥–ª—è —Å–≤–æ–¥–∫–∏
    const products = previewData.map(row => {
      const obj = {};
      previewHeaders.forEach((h, i) => {
        obj[h] = row[i];
      });
      return {
        price: Number(obj['–¶–µ–Ω–∞']?.toString().replace(/[^\d.,-]/g, '').replace(',', '.')) || 0,
        rating: Number(obj['–†–µ–π—Ç–∏–Ω–≥']?.toString().replace(/[^\d.,-]/g, '').replace(',', '.')) || 0,
        brand: obj['–ë—Ä–µ–Ω–¥'] || '',
        shop: obj['–ú–∞–≥–∞–∑–∏–Ω'] || '',
        name: obj['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'] || obj['–ù–∞–∑–≤–∞–Ω–∏–µ'] || '',
        reviews: Number(obj['–ö–æ–ª-–≤–æ –æ—Ç–∑—ã–≤–æ–≤']?.toString().replace(/[^\d]/g, '')) || 0,
        link: obj['–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä'] || '',
      };
    });
    updateSummary(products);
  } catch (e) {
    previewTable.innerHTML = '<div style="color:red">–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞</div>';
    updateSummary([]);
  }
}

searchBtn.onclick = async () => {
  const query = searchInput.value.trim();
  searchBtn.disabled = true;
  searchInput.disabled = true;
  loadingOverlay.style.display = 'flex';
  try {
    await ipcRenderer.invoke('run-parser', query);
    updateFileList();
  } catch (e) {
    alert('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ' + e);
  }
  loadingOverlay.style.display = 'none';
  searchBtn.disabled = false;
  searchInput.disabled = false;
  searchBtn.textContent = '–ò—Å–∫–∞—Ç—å';
};

window.onload = updateFileList;

function calculateSummary(products) {
  if (!products || !products.length) return {};
  const prices = products.map(p => p.price).filter(Boolean).sort((a, b) => a - b);
  const ratings = products.map(p => p.rating).filter(Boolean);
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–∞–≥–∞–∑–∏–Ω—É
  const shops = {};
  products.forEach(p => {
    const shop = p.shop || p['shop'] || p['–ú–∞–≥–∞–∑–∏–Ω'] || '';
    if (!shop) return;
    if (!shops[shop]) shops[shop] = { sumRating: 0, count: 0 };
    shops[shop].sumRating += Number(p.rating) || 0;
    shops[shop].count++;
  });
  let topShop = '-';
  if (Object.keys(shops).length) {
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ —Å—É–º–º–∞—Ä–Ω–æ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É, –µ—Å–ª–∏ —É –≤—Å–µ—Ö —Ä–µ–π—Ç–∏–Ω–≥ 0 ‚Äî –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤
    const sorted = Object.entries(shops).sort((a, b) => {
      if (b[1].sumRating !== a[1].sumRating) return b[1].sumRating - a[1].sumRating;
      return b[1].count - a[1].count;
    });
    topShop = sorted[0][0];
  }
  const avgPrice = prices.reduce((a, b) => a + b, 0) / prices.length;
  const medianPrice = prices.length % 2 === 0 ?
    (prices[prices.length/2-1] + prices[prices.length/2]) / 2 :
    prices[Math.floor(prices.length/2)];
  const avgRating = ratings.length ? (ratings.reduce((a, b) => a + b, 0) / ratings.length) : 0;
  // –¢–æ–ø-5 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ç–∑—ã–≤–æ–≤ –∏ —Ä–µ–π—Ç–∏–Ω–≥—É
  const topProducts = products
    .filter(p => p.name && p.reviews)
    .sort((a, b) => {
      if (b.reviews !== a.reviews) return b.reviews - a.reviews;
      return b.rating - a.rating;
    })
    .slice(0, 5);
  // –¢–æ–ø-5 –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π (–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤, –æ—Ç–∑—ã–≤–∞–º, —Ä–µ–π—Ç–∏–Ω–≥—É)
  const nameGroups = {};
  products.forEach(p => {
    if (!p.name) return;
    const key = p.name.trim().toLowerCase();
    if (!nameGroups[key]) nameGroups[key] = { count: 0, sumReviews: 0, sumRating: 0, links: [] };
    nameGroups[key].count++;
    nameGroups[key].sumReviews += p.reviews || 0;
    nameGroups[key].sumRating += p.rating || 0;
    if (p.link) nameGroups[key].links.push(p.link);
  });
  const topNames = Object.entries(nameGroups)
    .map(([name, v]) => ({
      name,
      count: v.count,
      sumReviews: v.sumReviews,
      avgRating: v.count ? v.sumRating / v.count : 0,
      link: v.links[0] || ''
    }))
    .sort((a, b) => {
      if (b.count !== a.count) return b.count - a.count;
      if (b.sumReviews !== a.sumReviews) return b.sumReviews - a.sumReviews;
      return b.avgRating - a.avgRating;
    })
    .slice(0, 5);
  return {
    count: products.length,
    avgPrice,
    medianPrice,
    minPrice: prices[0],
    maxPrice: prices[prices.length-1],
    avgRating,
    minRating: Math.min(...ratings),
    maxRating: Math.max(...ratings),
    topShop,
    topProducts,
    topNames
  };
}

function renderSummary(summary) {
  const el = document.getElementById('summary');
  if (!el) return;
  el.innerHTML = `
    <div class="summary-item"><span class="summary-icon">üì¶</span><span class="summary-value">${summary.count || 0}</span><span class="summary-label">–¢–æ–≤–∞—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ</span></div>
    <div class="summary-item"><span class="summary-icon">üí∞</span><span class="summary-value">${summary.avgPrice ? summary.avgPrice.toLocaleString('ru-RU', {maximumFractionDigits:0}) : '-'}</span><span class="summary-label">–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞</span></div>
    <div class="summary-item"><span class="summary-icon">üìä</span><span class="summary-value">${summary.medianPrice ? summary.medianPrice.toLocaleString('ru-RU', {maximumFractionDigits:0}) : '-'}</span><span class="summary-label">–ú–µ–¥–∏–∞–Ω–∞ —Ü–µ–Ω—ã</span></div>
    <div class="summary-item"><span class="summary-icon">‚¨áÔ∏è</span><span class="summary-value">${summary.minPrice ? summary.minPrice.toLocaleString('ru-RU', {maximumFractionDigits:0}) : '-'}</span><span class="summary-label">–ú–∏–Ω. —Ü–µ–Ω–∞</span></div>
    <div class="summary-item"><span class="summary-icon">‚¨ÜÔ∏è</span><span class="summary-value">${summary.maxPrice ? summary.maxPrice.toLocaleString('ru-RU', {maximumFractionDigits:0}) : '-'}</span><span class="summary-label">–ú–∞–∫—Å. —Ü–µ–Ω–∞</span></div>
    <div class="summary-item"><span class="summary-icon">‚≠ê</span><span class="summary-value">${summary.avgRating ? summary.avgRating.toFixed(2) : '-'}</span><span class="summary-label">–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥</span></div>
    <div class="summary-item"><span class="summary-icon">üè™</span><span class="summary-value">${summary.topShop || '-'}</span><span class="summary-label">–¢–æ–ø –º–∞–≥–∞–∑–∏–Ω</span></div>
    <div class="summary-flex-row" style="display:flex;gap:32px;align-items:flex-start;margin-top:10px;">
      <div style="flex:1;min-width:600px;">
        <span class="summary-label" style="font-weight:600;font-size:1rem;">–¢–æ–ø 5 —Å–∞–º—ã—Ö –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–ø–æ –æ—Ç–∑—ã–≤–∞–º –∏ —Ä–µ–π—Ç–∏–Ω–≥—É)</span>
        <div style="margin-top:6px;">
          ${summary.topProducts && summary.topProducts.length ? summary.topProducts.map((p, i) => `
            <div style="margin-bottom:4px;font-size:0.95em;">
              <span style="font-weight:600;">${i+1}.</span> ${p.name ? p.name : '-'}
              <span style="color:#2d72d9;">${p.price ? ' ¬∑ ' + p.price.toLocaleString('ru-RU') + '‚ÇΩ' : ''}</span>
              <span style="color:#f5b50a;">${p.rating ? ' ¬∑ ' + p.rating.toFixed(2) + '‚òÖ' : ''}</span>
              <span style="color:#888;">${p.reviews ? ' ¬∑ ' + p.reviews + ' –æ—Ç–∑—ã–≤–æ–≤' : ''}</span>
              ${p.link ? `<a href="#" onclick="window.openLink('${p.link}')" style="color:#6c63ff;text-decoration:underline;margin-left:6px;">–°—Å—ã–ª–∫–∞</a>` : ''}
            </div>
          `).join('') : '<span style="color:#888">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</span>'}
        </div>
      </div>
      <div style="flex:1;min-width:220px;">
        <span class="summary-label" style="font-weight:600;font-size:1rem;">–¢–æ–ø 5 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π (–ø–æ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Ç–æ–≤–∞—Ä–æ–≤)</span>
        <div style="margin-top:6px;">
          ${summary.topNames && summary.topNames.length ? summary.topNames.map((n, i) => `
            <div style="margin-bottom:4px;font-size:0.95em;">
              <span style="font-weight:600;">${i+1}.</span> ${n.name}
              <span style="color:#2d72d9;"> ¬∑ ${n.count} —Ç–æ–≤–∞—Ä–æ–≤</span>
              <span style="color:#f5b50a;">${n.avgRating ? ' ¬∑ ' + n.avgRating.toFixed(2) + '‚òÖ' : ''}</span>
              <span style="color:#888;">${n.sumReviews ? ' ¬∑ ' + n.sumReviews + ' –æ—Ç–∑—ã–≤–æ–≤' : ''}</span>
            </div>
          `).join('') : '<span style="color:#888">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</span>'}
        </div>
      </div>
    </div>
  `;
}

// –í—ã–∑–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:
function updateSummary(products) {
  const summary = calculateSummary(products);
  renderSummary(summary);
}

// –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–¥–∞–ª–µ–Ω—ã 